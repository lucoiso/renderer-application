name: CMake Build Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TESTS: false # This application doesn't contain tests at the moment, will re-enable after implementations
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  CONAN_PRESET: conan-release
  CONAN_PROFILE: Profiles/WinRel

permissions:
  actions: read
  deployments: write
  contents: write
  id-token: write
  security-events: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        build_type: [ Release ]
        c_compiler: [ clang, cl ]

        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

        exclude:
          - os: windows-latest
            c_compiler: clang

          - os: ubuntu-latest
            c_compiler: cl

          - os: macos-latest
            c_compiler: cl

    steps:
      - name: Checkout & Init Submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest
          ninjaVersion: latest

      - name: Get Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install Ubuntu Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev

      - name: Detect Conan Profile
        working-directory: ${{github.workspace}}
        run: conan profile detect --force

      - name: Get Packages from Conan
        if: matrix.os == 'windows-latest'
        working-directory: ${{github.workspace}}
        run: conan install . --build=missing -s build_type=Release -s compiler.cppstd=23

      - name: Get Packages from Conan
        if: matrix.os != 'windows-latest'
        working-directory: ${{github.workspace}}
        run: conan install . --build=missing -s build_type=Release -s compiler=clang -s compiler.libcxx=libc++11 -s compiler.cppstd=gnu23 -s compiler.version=16

      - name: Install Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers
          vulkan-use-cache: true

      - name: Configure CMake
        run: cmake --preset ${{env.CONAN_PRESET}}

      - name: Build Project
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --preset ${{env.CONAN_PRESET}}

      - name: Run Tests
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Run Benchmark
        working-directory: ${{ steps.strings.outputs.build-output-dir }}/bin
        run: ./Benchmark.exe
